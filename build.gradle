/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '1.5.0'
}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.+'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

def isCI = System.getenv('TRAVIS') && System.getenv('CI')

version = '0.2'

if (!isCI) {
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact(sourceJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }

                groupId = 'com.oscarbutler'
                artifactId = 'celticknots'
                version = project.version

                pom {
                    name = project.name
                    description = 'A library for creating Celtic Knots'
                    licenses {
                        license {
                            name = 'GNU GENERAL PUBLIC LICENSE, Version 3'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'oscarb'
                            name = 'Oscar Butler-Aldridge'
                            email = 'oscarb@protonmail.com'
                            organization = ''
                            organizationUrl = ''
                        }
                    }
                    scm {
                        url = 'https://github.com/0scarB/celtic-knots/'
                        connection = 'scm:git:git://github.com/0scarB/celtic-knots.git'
                        developerConnection = 'scm:git:ssh://git@github.com:0scarB/celtic-knots.git'
                    }
                }
            }
        }

        repositories {
            mavenCentral()
            maven {
                credentials {
                    username = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : ''
                    password = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : ''
                }
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                // url = "$buildDir/repo"
            }
        }
    }

    bintray {
        user = project.hasProperty('jfrogBintrayUsername') ? project.property('jfrogBintrayUsername') : ''
        key = project.hasProperty('jfrogBintrayAPIKey') ? project.property('jfrogBintrayAPIKey') : ''
        pkg {
            repo = 'com.oscarbutler'
            name = 'celticknots'
            userOrg = '0scarb'
            licenses = ['GPL-3.0']
            vcsUrl = 'https://github.com/0scarB/celtic-knots'
        }
        publications = ['mavenJava']
    }

    javadoc {
        options.addBooleanOption('html5', true)
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

// Code Coverage
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

// Display deprecation warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

// Custom tasks
task rebuild {
    description 'Reruns the build script and overwrites the buildDir.'
}
rebuild.dependsOn(clean)
rebuild.dependsOn(build)
rebuild.mustRunAfter(clean)

task rebuildTestCov {
    description 'Rebuilds, runs tests and then generates code coverage.'
}
rebuildTestCov.dependsOn(rebuild)
rebuildTestCov.dependsOn(jacocoTestReport)
rebuildTestCov.mustRunAfter(rebuild)
